{
  "{\"sourceRoot\":\"/Users/joshlevine/dev/Ethereum/Maker/multicall-test\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/joshlevine/dev/Ethereum/Maker/multicall-test\",\"filename\":\"/Users/joshlevine/dev/Ethereum/Maker/multicall-test/test.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/joshlevine/dev/Ethereum/Maker/multicall-test\",\"plugins\":[],\"presets\":[]}:7.2.2": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/joshlevine/dev/Ethereum/Maker/multicall-test",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/joshlevine/dev/Ethereum/Maker/multicall-test",
      "filename": "/Users/joshlevine/dev/Ethereum/Maker/multicall-test/test.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/joshlevine/dev/Ethereum/Maker/multicall-test",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/joshlevine/dev/Ethereum/Maker/multicall-test/test.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/joshlevine/dev/Ethereum/Maker/multicall-test/test.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/joshlevine/dev/Ethereum/Maker/multicall-test",
        "sourceFileName": "test.js"
      }
    },
    "ast": null,
    "code": "const addresses = [];\nconst properties = {\n  addresses: []\n};\n\nconst addAddress = address => {\n  properties.addresses.push(address);\n};\n\naddAddress('rune');\naddAddress('andy');\nconst templates = {};\n\nfunction createTemplate(strings, ...args) {\n  //console.log('strings', strings);\n  //const params = strings[0].split(',')\n  //console.log('params', params);\n  //console.log('args', properties[strings].map(address => args[0](address)));\n  templates[strings[0]] = args;\n}\n\ncreateTemplate`chief${(foo, bar) => ({\n  key: `proposals.${foo}.bar.baz`,\n  poll: true,\n  to: '0xa63E145309cadaa6A903a19993868Ef7E85058BE',\n  // proxy factory\n  method: `hotMap(address,${bar})`,\n  args: [[foo, 'address']],\n  returns: [[`proxyAddressHot-${foo}`, 'address']]\n})}baz`;\nconsole.log(templates.chief('0xf00', 'blah'));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QuanMiXSwibmFtZXMiOlsiYWRkcmVzc2VzIiwicHJvcGVydGllcyIsImFkZEFkZHJlc3MiLCJhZGRyZXNzIiwicHVzaCIsInRlbXBsYXRlcyIsImNyZWF0ZVRlbXBsYXRlIiwic3RyaW5ncyIsImFyZ3MiLCJmb28iLCJiYXIiLCJrZXkiLCJwb2xsIiwidG8iLCJtZXRob2QiLCJyZXR1cm5zIiwiY29uc29sZSIsImxvZyIsImNoaWVmIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxTQUFTLEdBQUcsRUFBbEI7QUFDQSxNQUFNQyxVQUFVLEdBQUc7QUFDakJELEVBQUFBLFNBQVMsRUFBRTtBQURNLENBQW5COztBQUlBLE1BQU1FLFVBQVUsR0FBR0MsT0FBTyxJQUFJO0FBQzVCRixFQUFBQSxVQUFVLENBQUNELFNBQVgsQ0FBcUJJLElBQXJCLENBQTBCRCxPQUExQjtBQUNELENBRkQ7O0FBSUFELFVBQVUsQ0FBQyxNQUFELENBQVY7QUFDQUEsVUFBVSxDQUFDLE1BQUQsQ0FBVjtBQUNBLE1BQU1HLFNBQVMsR0FBRyxFQUFsQjs7QUFFQSxTQUFTQyxjQUFULENBQXdCQyxPQUF4QixFQUFpQyxHQUFHQyxJQUFwQyxFQUEwQztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBSCxFQUFBQSxTQUFTLENBQUNFLE9BQU8sQ0FBQyxDQUFELENBQVIsQ0FBVCxHQUF3QkMsSUFBeEI7QUFDRDs7QUFFREYsY0FBZSxRQUFPLENBQUNHLEdBQUQsRUFBTUMsR0FBTixNQUFlO0FBQ25DQyxFQUFBQSxHQUFHLEVBQUcsYUFBWUYsR0FBSSxVQURhO0FBRW5DRyxFQUFBQSxJQUFJLEVBQUUsSUFGNkI7QUFHbkNDLEVBQUFBLEVBQUUsRUFBRSw0Q0FIK0I7QUFHZTtBQUNsREMsRUFBQUEsTUFBTSxFQUFHLGtCQUFpQkosR0FBSSxHQUpLO0FBS25DRixFQUFBQSxJQUFJLEVBQUUsQ0FBQyxDQUFDQyxHQUFELEVBQU0sU0FBTixDQUFELENBTDZCO0FBTW5DTSxFQUFBQSxPQUFPLEVBQUUsQ0FBQyxDQUFFLG1CQUFrQk4sR0FBSSxFQUF4QixFQUEyQixTQUEzQixDQUFEO0FBTjBCLENBQWYsQ0FPbkIsS0FQSDtBQVNBTyxPQUFPLENBQUNDLEdBQVIsQ0FBWVosU0FBUyxDQUFDYSxLQUFWLENBQWdCLE9BQWhCLEVBQXlCLE1BQXpCLENBQVoiLCJzb3VyY2VSb290IjoiL1VzZXJzL2pvc2hsZXZpbmUvZGV2L0V0aGVyZXVtL01ha2VyL211bHRpY2FsbC10ZXN0Iiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYWRkcmVzc2VzID0gW107XG5jb25zdCBwcm9wZXJ0aWVzID0ge1xuICBhZGRyZXNzZXM6IFtdXG59O1xuXG5jb25zdCBhZGRBZGRyZXNzID0gYWRkcmVzcyA9PiB7XG4gIHByb3BlcnRpZXMuYWRkcmVzc2VzLnB1c2goYWRkcmVzcyk7XG59O1xuXG5hZGRBZGRyZXNzKCdydW5lJyk7XG5hZGRBZGRyZXNzKCdhbmR5Jyk7XG5jb25zdCB0ZW1wbGF0ZXMgPSB7fTtcblxuZnVuY3Rpb24gY3JlYXRlVGVtcGxhdGUoc3RyaW5ncywgLi4uYXJncykge1xuICAvL2NvbnNvbGUubG9nKCdzdHJpbmdzJywgc3RyaW5ncyk7XG4gIC8vY29uc3QgcGFyYW1zID0gc3RyaW5nc1swXS5zcGxpdCgnLCcpXG4gIC8vY29uc29sZS5sb2coJ3BhcmFtcycsIHBhcmFtcyk7XG4gIC8vY29uc29sZS5sb2coJ2FyZ3MnLCBwcm9wZXJ0aWVzW3N0cmluZ3NdLm1hcChhZGRyZXNzID0+IGFyZ3NbMF0oYWRkcmVzcykpKTtcbiAgdGVtcGxhdGVzW3N0cmluZ3NbMF1dID0gYXJncztcbn1cblxuY3JlYXRlVGVtcGxhdGVgY2hpZWYkeyhmb28sIGJhcikgPT4gKHtcbiAga2V5OiBgcHJvcG9zYWxzLiR7Zm9vfS5iYXIuYmF6YCxcbiAgcG9sbDogdHJ1ZSxcbiAgdG86ICcweGE2M0UxNDUzMDljYWRhYTZBOTAzYTE5OTkzODY4RWY3RTg1MDU4QkUnLCAvLyBwcm94eSBmYWN0b3J5XG4gIG1ldGhvZDogYGhvdE1hcChhZGRyZXNzLCR7YmFyfSlgLFxuICBhcmdzOiBbW2ZvbywgJ2FkZHJlc3MnXV0sXG4gIHJldHVybnM6IFtbYHByb3h5QWRkcmVzc0hvdC0ke2Zvb31gLCAnYWRkcmVzcyddXVxufSl9YmF6YDtcblxuY29uc29sZS5sb2codGVtcGxhdGVzLmNoaWVmKCcweGYwMCcsICdibGFoJykpO1xuIl19",
    "map": {
      "version": 3,
      "sources": [
        "test.js"
      ],
      "names": [
        "addresses",
        "properties",
        "addAddress",
        "address",
        "push",
        "templates",
        "createTemplate",
        "strings",
        "args",
        "foo",
        "bar",
        "key",
        "poll",
        "to",
        "method",
        "returns",
        "console",
        "log",
        "chief"
      ],
      "mappings": "AAAA,MAAMA,SAAS,GAAG,EAAlB;AACA,MAAMC,UAAU,GAAG;AACjBD,EAAAA,SAAS,EAAE;AADM,CAAnB;;AAIA,MAAME,UAAU,GAAGC,OAAO,IAAI;AAC5BF,EAAAA,UAAU,CAACD,SAAX,CAAqBI,IAArB,CAA0BD,OAA1B;AACD,CAFD;;AAIAD,UAAU,CAAC,MAAD,CAAV;AACAA,UAAU,CAAC,MAAD,CAAV;AACA,MAAMG,SAAS,GAAG,EAAlB;;AAEA,SAASC,cAAT,CAAwBC,OAAxB,EAAiC,GAAGC,IAApC,EAA0C;AACxC;AACA;AACA;AACA;AACAH,EAAAA,SAAS,CAACE,OAAO,CAAC,CAAD,CAAR,CAAT,GAAwBC,IAAxB;AACD;;AAEDF,cAAe,QAAO,CAACG,GAAD,EAAMC,GAAN,MAAe;AACnCC,EAAAA,GAAG,EAAG,aAAYF,GAAI,UADa;AAEnCG,EAAAA,IAAI,EAAE,IAF6B;AAGnCC,EAAAA,EAAE,EAAE,4CAH+B;AAGe;AAClDC,EAAAA,MAAM,EAAG,kBAAiBJ,GAAI,GAJK;AAKnCF,EAAAA,IAAI,EAAE,CAAC,CAACC,GAAD,EAAM,SAAN,CAAD,CAL6B;AAMnCM,EAAAA,OAAO,EAAE,CAAC,CAAE,mBAAkBN,GAAI,EAAxB,EAA2B,SAA3B,CAAD;AAN0B,CAAf,CAOnB,KAPH;AASAO,OAAO,CAACC,GAAR,CAAYZ,SAAS,CAACa,KAAV,CAAgB,OAAhB,EAAyB,MAAzB,CAAZ",
      "sourceRoot": "/Users/joshlevine/dev/Ethereum/Maker/multicall-test",
      "sourcesContent": [
        "const addresses = [];\nconst properties = {\n  addresses: []\n};\n\nconst addAddress = address => {\n  properties.addresses.push(address);\n};\n\naddAddress('rune');\naddAddress('andy');\nconst templates = {};\n\nfunction createTemplate(strings, ...args) {\n  //console.log('strings', strings);\n  //const params = strings[0].split(',')\n  //console.log('params', params);\n  //console.log('args', properties[strings].map(address => args[0](address)));\n  templates[strings[0]] = args;\n}\n\ncreateTemplate`chief${(foo, bar) => ({\n  key: `proposals.${foo}.bar.baz`,\n  poll: true,\n  to: '0xa63E145309cadaa6A903a19993868Ef7E85058BE', // proxy factory\n  method: `hotMap(address,${bar})`,\n  args: [[foo, 'address']],\n  returns: [[`proxyAddressHot-${foo}`, 'address']]\n})}baz`;\n\nconsole.log(templates.chief('0xf00', 'blah'));\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1546917047369
  }
}